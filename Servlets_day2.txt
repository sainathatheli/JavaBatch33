Servlets:
==========
Servelt is an Api (Interfaces and classes)

Api :-- APi contain set of rules and guidelines in order to develop a servlet class

Servlet is used to develop dynamic webpages.

==> servlet is not standalone application(it not have main method)    

  servlet is webapplication which runs over the internet 
  servlet is webapplication which runs inside the server.

=>Servlet technology is used to create a web application (resides at server side and generates a dynamic web page).

=>Servlet is a class that extends the capabilities of the servers and responds 
    to the incoming requests. It can respond to any requests.

=>Servlet is a web component that is deployed on the server to create a dynamic web page.

 examples :
  ---------
    Google,facebook,amazon.....etc


1)Servlet is an APi ;-https://tomcat.apache.org/tomcat-x.x-doc/servletapi/

who will provide implementation for servlet api
===============================================
Server vendors are responsible to provide the implementation for serveltApi
(servlet api 3.0 and above)

webserver:
==========
tomcat -- lib--> servlet-api.jar(servlet engine or servlet container)


Application Servers
====================

Weblogic ---javax-assist-3.0.jar
Jboss
websphere --IBM
Glassfish --etc

note:
-----
servlet is java class which doesnot contain main method.


1)Servlet is an interface:
=========================
it contain five abstract methods

 javax.servlet.*;

 1) public void init(ServletConfig config);
 2) pubic void service(ServletRequest request,ServletResponse response);
 3) public void destroy();
 4) public ServletConfig getServletConfig();
 5) public String getServletInfo();

2)GenericServlet is a abstract class
  ------------------------------------- 
  javax.servlet.GenericServlet --it's a abstract class
   
   //it contain implementation for four methods of Servlet interface
    1)init(),destroy(),getServletCOnfig()(,getServletInfo() 

   2)they not provide implementation for service() method()
     abstract method.

   //Generic Servlet class Contain its own methods.


3)HttpServlet is abstract class which extends from GenericServlet
 -----------------------------------------------------------------
  javax.servlet.http.HttpServlet

  //they provide implementation for service(ServletRequest ,ServletResponse) method
   // and it contains it's own methods

     protectecd doGet(HttpServletRequest request,HttpServletResponse 
    respone){
     }

     protected doPost(HttpServletRequest request,HttpServletResponse 
    respone){
     }

     protected service(HttpServletRequest request,HttpServletResponse 
    respone){
     }

    protected doPut(HttpServletRequest request,HttpServletResponse 
    respone){
     }
  
 }

How to develop servlet class:
=============================
In three ways we can create a Servlet class

 1)create a Servlet class which implements Servlet interface directly
    //provide implementation for five methods

 2)create a serlvet class which extends from GenericServlet class and
   provide implementation  for service(ServletRequest req,ServletResponse response)

 3)create a Servletclass which extends from HttpServlet 
  and override any one of the method based on requirements.(Welcome)

note:
-----
Recommended To develop a servlet class--- 3


Http protocol:
===============

Http protocol is stateless protocol or asyhcronous  protocol
------------------------------------------------------------
http(hyper text transfer protocol)

TCP/IP- transmission control protocol /Internet protocol

smtp - simple messager/mail transfer protocol

ftp -- file transfer protocol


please download tomcat server  from apache foundation

=>tomcat server 9.x  in zip 


Example:
---------
Note:
-----
In eclipse for webapplication(Servlets,jsp) we need to create project as Dynamicwebproject.


create a servlet class which displays welcome message with xml configuration(web.xml). 
(web.xml is also called as deployment descriptor)
===============================================================
create a Dynamicwebproject named as myApp

1)create a class WelcomeServlet extends from HttpServlet

2)override any one of the method from httpservelt class
  service(HttpServletRequest request,HttpServletResponse response)

sol:
----
package com.training;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class WelcomeServlet extends HttpServlet{

	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		
		//first get printwriter object
		PrintWriter out=resp.getWriter();
		
		out.print("Welcome to Servlets using web.xml(configuration file)");
		
		out.close();
	}
	
	
}


3)we need to configure this servlet class(WelcomeServlet) in
  deployment descriptor(web.xml) by using 
 <servlet> 
  <servlet-name>ws</servlet-name>
  <servlet-class>com.training.WelcomeServlet</servlet-class>
  </servlet>

  <servlet-mapping>
   <servlet-name>ws</servlet-name>
   <url-pattern>/welcome</url-pattern>
  </servlet-mapping>
  


4)deploy the project in the tomcat server
  
5)Execute the servlet application
  1) send the request from client(browser) to the server(tomcat) using http protocol  
 syntax:
 --------
  http://localhost:<portno>/projectname/requestedURI(urlpattern)

  ex:
  ---
  http://localhost:8000/myApp/welcome



@WebServlet 
============
@WebServlet annotation is the replacement of servlet configuration in web.xml. 

When we annotate our servlet class with @WebServlet annotation the container will be able to 
recognize this as a servlet at the loading time.

Class annotated with @WebServlet still needs to extends the HttpServlet class

With this annotation we can specify servlet-name, url-pattern, load on Start up, 
description ,init params ,async supported etc

Example:
--------

2)Create a webapplication which display welcome message using @WebServlet annotation
======================================================================================
create a Dynamicwebproject named as myAppWithAnnotationBased

a)create a class named as HelloWorld extends from HttpServlet

b)override any one of the method from httpservelt class
  doGet(HttpServletRequest request,HttpServletResponse response)

c)we need to configure this servlet class(HelloWorld) using @WebServlet()

Ex:
---
@WebServlet(urlPatterns = {"/hello","/abc","/h"})   //configuring servlet using @webServlet
public class HelloWorld extends HttpServlet {

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		resp.setContentType("text/html");
		PrintWriter out=resp.getWriter();
		
		out.println("welcome to servlets using @Webservlet anntotaion");
		
		out.close();
		
	}
}

d)deploy the project in the tomcat server

e)Execute the servlet application

  1) send the request from client(browser) to the server(tomcat) using http protocol  
 syntax:
 --------
  http://localhost:<portno>/projectname/requestedURI(urlpattern)

ex:
---
http://localhost:8000/myAppWithAnnotationBased/h
http://localhost:8000/myAppWithAnnotationBased/hello
http://localhost:8000/myAppWithAnnotationBased/abc

Servlet life cycle methods:
===========================
1) init() --- this method will be execute  only once at the 
              deployment of project

2)service()--- this method is executed for every new request from the
                client

3)destroy() --- this method executes only once when stop the server   
                 or undeploy the project


Control flow of servlet execution:
====================================

WelcomeServlet
---------------
1)client the send request for your servlet class by using url
  http://localhost:8000/dempOnLifeCycleMethods/lifecycle

2)Server will load the web.xml into servers jvms memory

3) server get the requested resource of servlet which send by the client
   note :- welcome

4)server will check whether in web.xml based on that url pattern (welcome) 
 available or not.

5) if available server search for servlet-name(ws)

6)Based on this servlet-name server will search for servlet tag inside
  servlet-name tag should be match

6)if match the server search for com.training.WelcomeServlet class and load
   this class into servers Jvm memory.

7) server will create object for your servlet class(WelcomeServlet) internally
  using Class.forName 
  
   syntax:
   -----

   Class c = Class.forName("com.training.WelcomeServlet")
   Object o = c.getInstance();
   WelcomeServlet ws = (WelcomeServlet)0

8)once the object is created it will call init() method followed by 
service() method.



load on startup(web.xml):
========================

to create the object of your servlet class at the time of deployment.

we need to configure this tag under servlet tag after servelt-class tag

<servlet>
<load-on-startup>positive integer value</load-on-startup>
</servlet>


or
@WebServlet(loadOnStartup=1):
============

Here we declare the servlet StartupServlet with loadOnStartup = 1 which means that this servlet is initialized(creating the object) automatically by the servlet container when the server is being started (the message in the init() method will be printed).




3) CREATE A SERVLET CLASS , WRITE A CODE TO GET THE EMPLOYEE DETAILS
FROM  EMPLOYEE.HTML AND DISPLAY EMPLOYEE DETAILS ON THE BROWSER 
Configure the servlet with @WebServlet annotation.

Create a new DynamicewebProject named as empProject.

Note:
======
we need to create All html files or jsp file under webapp/WebContent Folder


a)create a html file named as employee.html with three fields

empno :
ename :
salary :
          save

sol:
----
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>

<form action="empDetails" method="post">
<label>EmployeeId</label>
<input type="text" name="eid"> <br>

<label>EmployeeName</label>
<input type="text" name="en"> <br>

<label>Salary</label>
<input type="text" name="es"> <br>

<input type="submit" value="save">


</form>


</body>
</html>



b)Create a servlet class named EmployeeController and write a code to get the employee form fields values in servlet
(request.getParameter()).
      
c) Display employe details
EMployee Details

empno : xxxx
ename :yyyyy
salary : yyyy

Click here to employee page 

sol:
----

@WebServlet("/empDetails")
public class EmployeeController extends HttpServlet{
	
    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    	
    	//get the employeeId,employeeName and Salary from emp.html
    	
    	String empid  = req.getParameter("eid");
    	String ename  = req.getParameter("en");
    	String salary = req.getParameter("es");
    	
    	//Display the data or send the respone back employee details.
    	
    	PrintWriter out=resp.getWriter();
    	
    	out.println("Employee Details are "+"<br>");
    	out.println("EmployeeID is : "+empid +"<br>");
    	out.println("EmployeeName is : "+ename +"<br>");
    	out.println("EmploySalary is : "+salary +"<br>");
    	
    	out.println("<a href='emp.html'>Click Here to Go Employee page</a>");
    	
    	out.close();
    }
	

}


Request this servlet in internal eclipse browser.
-------------------------------------------------
http://localhost:8000/empProject/emp.html


